(window.webpackJsonp=window.webpackJsonp||[]).push([[25],{588:function(t,n,a){"use strict";a.r(n);var s=a(17),e=Object(s.a)({},(function(){var t=this,n=t.$createElement,a=t._self._c||n;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("p",[t._v("题目来源于 LeetCode 上第 1 号问题：两数之和。题目难度为 Easy。")]),t._v(" "),a("h3",{attrs:{id:"题目描述"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#题目描述"}},[t._v("#")]),t._v(" 题目描述")]),t._v(" "),a("p",[t._v("给定一个整数数组 "),a("code",[t._v("nums")]),t._v(" 和一个目标值 "),a("code",[t._v("target")]),t._v("，请你在该数组中找出和为目标值的那 "),a("strong",[t._v("两个")]),t._v(" 整数，并返回他们的数组下标。")]),t._v(" "),a("p",[t._v("你可以假设每种输入只会对应一个答案。但是，你不能重复利用这个数组中同样的元素。")]),t._v(" "),a("p",[a("font",{attrs:{color:"#FF000"}},[t._v("题目难度: ★, 简单")])],1),t._v(" "),a("p",[a("strong",[t._v("示例:")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("给定 nums = [2, 7, 11, 15], target = 9\n\n因为 nums[0] + nums[1] = 2 + 7 = 9\n所以返回 [0, 1]\n")])])]),a("p",[t._v("示例 2：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("输入：nums = [3,2,4], target = 6\n输出：[1,2]\n")])])]),a("p",[t._v("示例 3：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("输入：nums = [3,3], target = 6\n输出：[0,1]\n")])])]),a("h3",{attrs:{id:"题目解析"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#题目解析"}},[t._v("#")]),t._v(" 题目解析")]),t._v(" "),a("p",[t._v("使用查找表来解决该问题。")]),t._v(" "),a("p",[t._v("设置一个 map 容器 record 用来记录元素的值与索引，然后遍历数组 nums。")]),t._v(" "),a("ul",[a("li",[t._v("每次遍历时使用临时变量 complement 用来保存目标值与当前值的差值")]),t._v(" "),a("li",[t._v("在此次遍历中查找 record ，查看是否有与 complement 一致的值，如果查找成功则返回查找值的索引值与当前变量的值 i")]),t._v(" "),a("li",[t._v("如果未找到，则在 record 保存该元素与索引值 i")])]),t._v(" "),a("h3",{attrs:{id:"代码实现"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#代码实现"}},[t._v("#")]),t._v(" 代码实现")]),t._v(" "),a("blockquote",[a("p",[t._v("tips: 以下代码是使用Go代码实现的不同解法, 文章最后可以看C++、C、Java、Python实现")])]),t._v(" "),a("h4",{attrs:{id:"_1、暴力解法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1、暴力解法"}},[t._v("#")]),t._v(" 1、"),a("font",{attrs:{color:"#FF000"}},[t._v("暴力解法")])],1),t._v(" "),a("p",[t._v("最容易想到的方法是枚举数组中的每一个数 x，寻找数组中是否存在 target - x。")]),t._v(" "),a("p",[t._v("当我们使用遍历整个数组的方式寻找 target - x 时，需要注意到每一个位于 x 之前的元素都已经和 x 匹配过，因此不需要再进行匹配。而每一个元素不能被使用两次，所以我们只需要在 x 后面的元素中寻找 target - x。")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("func twoSum(nums []int, target int) []int {\n    numsLen := len(nums)\n    for i, num := range nums {\n        for j := i + 1; j < numsLen; j++ {\n            if target == num + nums[j] {\n                return []int{i, j}\n            }\n        }\n    }\n    return []int{}\n}\n")])])]),a("p",[a("strong",[t._v("执行结果")]),t._v(":")]),t._v(" "),a("ul",[a("li",[t._v("时间复杂度：O(N^2)，其中 N 是数组中的元素数量。最坏情况下数组中任意两个数都要被匹配一次。")]),t._v(" "),a("li",[t._v("空间复杂度：O(1)。")])]),t._v(" "),a("p",[a("font",{attrs:{color:"#FF000"}},[t._v("内存方面还可以，不过运行时间偏慢, 时间复杂度太高了")]),t._v("。")],1),t._v(" "),a("p",[a("img",{attrs:{src:"https://images.xiaozhuanlan.com/uploads/photo/2022/642652e3-214a-4831-a802-d0cdcc745d82.png",alt:""}})]),t._v(" "),a("h4",{attrs:{id:"_2、使用map方式-nums-的值进行倒排索引-以空间换时间-时间复杂度是o-n"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2、使用map方式-nums-的值进行倒排索引-以空间换时间-时间复杂度是o-n"}},[t._v("#")]),t._v(" 2、"),a("font",{attrs:{color:"#FF000"}},[t._v("使用map方式, nums 的值进行倒排索引, 以空间换时间， 时间复杂度是O(n)")])],1),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("func twoSum(nums []int, target int) []int {\n    numsMap := make(map[int]int)\n\n    for index, num := range nums{\n        numsMap[num] = index    \n    }\n\n    for index, num := range nums {\n        if preIndex, ok := numsMap[target-num];  (ok && preIndex != index) {\n            return []int{preIndex, index}\n        } \n        \n    }\n    return []int{}\n}\n")])])]),a("p",[a("strong",[t._v("执行结果")]),t._v(":")]),t._v(" "),a("p",[t._v("时间复杂度：O(n)，我们只"),a("font",{attrs:{color:"#FF000"}},[t._v("遍历了包含有O(n)个元素的列表两次")]),t._v("。在表中进行的每次查找只花费 O(1)的时间。"),a("br"),t._v("\n空间复杂度：O(n)，所需的额外空间取决于哈希表中存储的元素数量，该表最多需要存储 N个 元素。")],1),t._v(" "),a("p",[a("img",{attrs:{src:"https://images.xiaozhuanlan.com/uploads/photo/2022/85eb1555-7c8c-44dd-82cc-9fa26487ee07.png",alt:""}})]),t._v(" "),a("h4",{attrs:{id:"_3、使用map方式-nums-的值进行倒排索引-一遍哈希表"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3、使用map方式-nums-的值进行倒排索引-一遍哈希表"}},[t._v("#")]),t._v(" 3、"),a("font",{attrs:{color:"#FF000"}},[t._v("使用map方式, nums 的值进行倒排索引， 一遍哈希表")])],1),t._v(" "),a("p",[t._v("事实证明，我们可以一次完成。在"),a("font",{attrs:{color:"#FF000"}},[t._v("进行迭代并将元素插入到表中的同时，我们还会回过头来检查表中是否已经存在当前元素所对应的目标元素")]),t._v("。如果它存在，那我们已经找到了对应解，并立即将其返回。")],1),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("func twoSum(nums []int, target int) []int {\n    numsMap := make(map[int]int)\n    for index, num := range nums {\n        if preIndex, ok := numsMap[target-num]; ok {\n            return []int{preIndex, index}\n        }\n        numsMap[num] = index\n    }\n    return []int{}\n}\n")])])]),a("p",[a("strong",[t._v("执行结果")]),t._v(":")]),t._v(" "),a("p",[t._v("时间复杂度：O(n)，我们只遍历了包含有O(n)个元素的列表一次。在表中进行的每次查找只花费 O(1)的时间。"),a("br"),t._v("\n空间复杂度：O(n)，所需的额外空间取决于哈希表中存储的元素数量，该表最多需要存储 N个元素。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://images.xiaozhuanlan.com/uploads/photo/2022/b9311338-54f6-47c9-8abf-757bec313b2c.png",alt:""}})]),t._v(" "),a("h4",{attrs:{id:"_4、双指针游标"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4、双指针游标"}},[t._v("#")]),t._v(" 4、"),a("font",{attrs:{color:"#FF000"}},[t._v("双指针游标")])],1),t._v(" "),a("p",[t._v("双指针的思路")]),t._v(" "),a("ul",[a("li",[t._v("将原数组排好序, 设置两个指针left, right")]),t._v(" "),a("li",[t._v("left 从0开始, right 做 len(nums) - 1 开始")]),t._v(" "),a("li",[t._v("当nums[left] + nums[right] < target时，我们就没有必要对所有的right0 ∈(left, right)，因为nums[left] + nums[right0] 一定是比target小的, 所以left = left + 1后重新判断")]),t._v(" "),a("li",[t._v("当nums[left] + nums[right] > target时，同样的，对left0 ∈(left, right)，必然有nums[left0] + nums[right] > target, 所以right = right - 1后重新判断")]),t._v(" "),a("li",[t._v("当nums[left] + nums[right] = target时，就是我们想要知道的两个数值了")]),t._v(" "),a("li",[t._v("然后利用Map将数值转换为之前的游标")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("func twoSum(nums []int, target int) []int {\n\ttype Node struct{\n\t\tValue int\n\t\tNext  *Node\n\t}\n\t // 用链表是解决数组重复问题\n\tnumsMap := make(map[int]*Node)\n\tvar current *Node\n\tfor index, num := range nums{\n\t\tif _, ok := numsMap[num]; ok{\n\t\t\tcurrent = numsMap[num]\n\t\t\tfor {\n\t\t\t\tif current.Next == nil{\n\t\t\t\t\tcurrent.Next = &Node{index, nil}\n\t\t\t\t\tbreak\n\t\t\t\t}\n\n\t\t\t\tcurrent = current.Next\n\t\t\t}\n\t\t}else{\n\t\t\tnumsMap[num] = &Node{index, nil}\n\t\t}\n\t}\n\n\tsort.Ints(nums)\n\tleft := 0\n\tright := len(nums) - 1\n\tfor {\n\t\tif left >= right{\n\t\t\tbreak\n\t\t}\n\n\t\tsum := nums[left] + nums[right]\n\t\tif sum == target{\n\t\t\tif nums[left] == nums[right]{\n\t\t\t\treturn []int{numsMap[nums[left]].Value, numsMap[nums[left]].Next.Value}\n\t\t\t}else{\n\t\t\t\treturn []int{numsMap[nums[left]].Value, numsMap[nums[right]].Value}\n\t\t\t}\n\n\t\t}\n\n\t\tif sum < target{\n\t\t\tleft ++\n\n\t\t}else{\n\t\t\tright --\n\t\t}\n\t}\n\treturn []int{}\n}\n")])])]),a("p",[a("strong",[t._v("执行结果")]),t._v(":")]),t._v(" "),a("p",[a("font",{attrs:{color:"#FF000"}},[t._v("因为要排序，时间复杂度也比较高, 需要Map存储游标，空间复杂度也比较高, 算是一个不太好的实现方式。")])],1),t._v(" "),a("p",[a("img",{attrs:{src:"https://images.xiaozhuanlan.com/uploads/photo/2022/1225892d-6848-461d-b010-bd5d6a207ce6.png",alt:""}})]),t._v(" "),a("h3",{attrs:{id:"其他语言版本"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#其他语言版本"}},[t._v("#")]),t._v(" 其他语言版本")]),t._v(" "),a("h4",{attrs:{id:"c"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#c"}},[t._v("#")]),t._v(" C++")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("// 1. Two Sum\n// 时间复杂度：O(n)\n// 空间复杂度：O(n)\nclass Solution {\npublic:\n    vector<int> twoSum(vector<int>& nums, int target) {\n        unordered_map<int,int> record;\n        for(int i = 0 ; i < nums.size() ; i ++){\n       \n            int complement = target - nums[i];\n            if(record.find(complement) != record.end()){\n                int res[] = {i, record[complement]};\n                return vector<int>(res, res + 2);\n            }\n\n            record[nums[i]] = i;\n        }\n        return {};\n    }\n};\n\n")])])]),a("p",[a("strong",[t._v("执行结果")])]),t._v(" "),a("p",[a("img",{attrs:{src:"https://images.xiaozhuanlan.com/uploads/photo/2022/f1e7e501-0bc9-4599-960f-61e509d9381c.png",alt:""}})]),t._v(" "),a("h4",{attrs:{id:"c-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#c-2"}},[t._v("#")]),t._v(" C")]),t._v(" "),a("div",{staticClass:"language-c extra-class"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 1. Two Sum")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 时间复杂度：O(n)")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 空间复杂度：O(n)")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/**\n * Note: The returned array must be malloced, assume caller calls free().\n */")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("twoSum")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" nums"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" numsSize"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" target"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" returnSize"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("ans"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("malloc")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("sizeof")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("j"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    bool flag"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("false"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("numsSize"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("j"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("j"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("numsSize"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("j"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("nums"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v("nums"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("j"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" target"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                ans"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n                ans"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("j"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n                flag"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("true"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("flag"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("returnSize "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("returnSize "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" ans"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[a("strong",[t._v("执行结果")])]),t._v(" "),a("p",[a("img",{attrs:{src:"https://images.xiaozhuanlan.com/uploads/photo/2022/9b4d1627-aa33-426a-8e64-e39c3a3e0c41.png",alt:""}})]),t._v(" "),a("h4",{attrs:{id:"java"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#java"}},[t._v("#")]),t._v(" Java")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("// 1. Two Sum\n// https://leetcode.com/problems/two-sum/description/\n// 时间复杂度：O(n)\n// 空间复杂度：O(n)\nclass Solution {\n    public int[] twoSum(int[] nums, int target) {\n        int l = nums.length;\n        int[] ans=new int[2];\n        int i,j;\n        for(i=0;i<l-1;i++)\n        {\n            for(j=i+1;j<l;j++)\n            {\n                if(nums[i]+nums[j] == target)\n                {\n                    ans[0]=i;\n                    ans[1]=j;\n                }\n            }\n        }\n        \n        return ans;\n        \n    }\n}\n")])])]),a("p",[a("strong",[t._v("执行结果")])]),t._v(" "),a("p",[a("img",{attrs:{src:"https://images.xiaozhuanlan.com/uploads/photo/2022/5772f727-21e7-4b09-a727-8e9aadce6418.png",alt:""}})]),t._v(" "),a("h4",{attrs:{id:"python"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#python"}},[t._v("#")]),t._v(" Python")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("# 1. Two Sum\n# https://leetcode.com/problems/two-sum/description/\n# 时间复杂度：O(n)\n# 空间复杂度：O(n)\nclass Solution(object):\n    def twoSum(self, nums, target):\n        l = len(nums)\n        print(nums)\n        ans=[]\n        for i in range(l-1):\n            for j in range(i+1,l):\n                if nums[i]+nums[j] == target:\n                    ans.append(i)\n                    ans.append(j)\n                    print([i,j])\n                    break\n        return ans\n")])])]),a("p",[a("strong",[t._v("执行结果")])]),t._v(" "),a("p",[a("img",{attrs:{src:"https://images.xiaozhuanlan.com/uploads/photo/2022/e70af7f4-7e77-4894-977e-38cfd9a0acdc.png",alt:""}})]),t._v(" "),a("h3",{attrs:{id:"结语"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#结语"}},[t._v("#")]),t._v(" "),a("strong",[t._v("结语")])]),t._v(" "),a("p",[t._v("综合来看， 选择方式3比较好: "),a("font",{attrs:{color:"#FF000"}},[t._v("使用map方式, nums 的值进行倒排索引， 一遍哈希表")]),t._v(", Go的实现在内存方面和时间复杂度都还可以， Python相对表现就差很多。")],1),t._v(" "),a("h3",{attrs:{id:"几种语言运行效果对比"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#几种语言运行效果对比"}},[t._v("#")]),t._v(" 几种语言运行效果对比")]),t._v(" "),a("p",[t._v("Go程序在内存方面表现最佳, Python在内存和运行时间表现 比较其他的语言都比较差。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://images.xiaozhuanlan.com/uploads/photo/2022/228bab2f-f795-4f2f-bfac-fed5956fc93f.png",alt:""}})]),t._v(" "),a("p",[t._v("也欢迎关注我的公众号: "),a("code",[t._v("漫步coding")]),t._v("。 一起交流, 在coding的世界里漫步。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://images.xiaozhuanlan.com/uploads/photo/2022/5cb0c91e-fd83-4a04-8df6-65fb602b3834.png",alt:""}})])])}),[],!1,null,null,null);n.default=e.exports}}]);