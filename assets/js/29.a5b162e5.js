(window.webpackJsonp=window.webpackJsonp||[]).push([[29],{591:function(n,t,e){"use strict";e.r(t);var s=e(17),a=Object(s.a)({},(function(){var n=this,t=n.$createElement,e=n._self._c||t;return e("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[e("p",[n._v("给你一个字符串 s，找到 s 中最长的回文子串。")]),n._v(" "),e("p",[e("font",{attrs:{color:"#FF000"}},[n._v("题目难度: ★★★, 中等")])],1),n._v(" "),e("p",[n._v("示例 1：")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v('输入：s = "babad"\n输出："bab"\n解释："aba" 同样是符合题意的答案。\n')])])]),e("p",[n._v("示例 2：")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v('输入：s = "cbbd"\n输出："bb"\n')])])]),e("p",[n._v("提示：")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("1 <= s.length <= 1000\ns 仅由数字和英文字母组成\n")])])]),e("h3",{attrs:{id:"代码实现"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#代码实现"}},[n._v("#")]),n._v(" 代码实现")]),n._v(" "),e("blockquote",[e("p",[n._v("tips: 以下代码是使用Go代码实现的不同解法, 文章最后可以看C++、C、Java、Python实现")])]),n._v(" "),e("p",[n._v("1、动态规划")]),n._v(" "),e("p",[n._v("主要思路:")]),n._v(" "),e("ul",[e("li",[n._v("依次假设回文可能的长度是 2, 3, 4, len(str)")]),n._v(" "),e("li",[n._v("目前回文长度是sl\n"),e("ul",[e("li",[n._v("那么通过起点left, 可以判断终点的right = left + sl - 1")]),n._v(" "),e("li",[n._v("判断left 和 right 是否一致")])])]),n._v(" "),e("li",[n._v("如果left到right是回文字符串，判断是不是大于目前的回文长度, 如果是, 则使用更新到ml, si中.")])]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("func longestPalindrome(s string) string {\n    length := len(s)\n    if length < 2 {\n        return s\n    }\n\n    result := make([][]bool, length)\n    for i := 0; i < length; i++ {\n        result[i] = make([]bool, length)\n    }\n\n    ml, si := 1, 0\n    // 假设回文字串长度是 sl = right - left + 1\n    for sl := 2; sl <= length; sl++ {\n        // 左边界 i\n        for left := 0; left < length; left++ {\n            // 右边界 right - left + 1 = sl\n            right := left + sl - 1\n            if right >= length{\n                break\n            }\n            if s[left] != s[right] {\n                result[left][right] = false\n            } else {\n                if sl <= 3 {\n                    result[left][right] = true\n                } else {\n                    // result[left+1][right-1] 的长度是sl-2, 已经判断过了, 所以可以直接使用\n                    result[left][right] = result[left+1][right-1]\n                }\n            }\n\n            if result[left][right] && sl > ml {\n                ml = sl\n                si = left\n            }\n        }\n    }\n    return s[si:si+ml]\n}\n")])])]),e("p",[n._v("执行结果分析:")]),n._v(" "),e("p",[n._v("时间复杂度：O(n^2) 其中 n 是字符串的长度。"),e("br"),n._v("\n空间复杂度：O(n^2)。")]),n._v(" "),e("p",[e("img",{attrs:{src:"https://images.xiaozhuanlan.com/uploads/photo/2022/a3cbd180-9c3d-415a-b368-3ee9fd8cb915.png",alt:""}})]),n._v(" "),e("h3",{attrs:{id:"其他语言实现"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#其他语言实现"}},[n._v("#")]),n._v(" 其他语言实现")]),n._v(" "),e("p",[n._v("1、Java")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("class Solution {\n  public String longestPalindrome(String s) {\n        if (s == null || s.length() < 2) {\n            return s;\n        }\n        int strLen = s.length();\n        int maxStart = 0;  //最长回文串的起点\n        int maxEnd = 0;    //最长回文串的终点\n        int maxLen = 1;  //最长回文串的长度\n\n        boolean[][] dp = new boolean[strLen][strLen];\n\n        for (int r = 1; r < strLen; r++) {\n            for (int l = 0; l < r; l++) {\n                if (s.charAt(l) == s.charAt(r) && (r - l <= 2 || dp[l + 1][r - 1])) {\n                    dp[l][r] = true;\n                    if (r - l + 1 > maxLen) {\n                        maxLen = r - l + 1;\n                        maxStart = l;\n                        maxEnd = r;\n\n                    }\n                }\n\n            }\n\n        }\n        return s.substring(maxStart, maxEnd + 1);\n\n    }\n}\n")])])]),e("p",[e("img",{attrs:{src:"https://images.xiaozhuanlan.com/uploads/photo/2022/12c7aca1-01c0-4635-a36a-9735e7b49223.png",alt:""}})]),n._v(" "),e("p",[n._v("2、Python3")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("class Solution:\n    def longestPalindrome(self, s: str) -> str:\n        n = len(s)\n        if n < 2:\n            return s\n        \n        max_len = 1\n        begin = 0\n        # dp[i][j] 表示 s[i..j] 是否是回文串\n        dp = [[False] * n for _ in range(n)]\n        for i in range(n):\n            dp[i][i] = True\n        \n        # 递推开始\n        # 先枚举子串长度\n        for L in range(2, n + 1):\n            # 枚举左边界，左边界的上限设置可以宽松一些\n            for i in range(n):\n                # 由 L 和 i 可以确定右边界，即 j - i + 1 = L 得\n                j = L + i - 1\n                # 如果右边界越界，就可以退出当前循环\n                if j >= n:\n                    break\n                    \n                if s[i] != s[j]:\n                    dp[i][j] = False \n                else:\n                    if j - i < 3:\n                        dp[i][j] = True\n                    else:\n                        dp[i][j] = dp[i + 1][j - 1]\n                \n                # 只要 dp[i][L] == true 成立，就表示子串 s[i..L] 是回文，此时记录回文长度和起始位置\n                if dp[i][j] and j - i + 1 > max_len:\n                    max_len = j - i + 1\n                    begin = i\n        return s[begin:begin + max_len]\n\n")])])]),e("p",[e("font",{attrs:{color:"#FF000"}},[n._v("Python好慢,花了7秒")])],1),n._v(" "),e("p",[e("img",{attrs:{src:"https://images.xiaozhuanlan.com/uploads/photo/2022/6bb19daf-29ef-4237-8e5d-554d59ed12c9.png",alt:""}})]),n._v(" "),e("p",[n._v("3、C++")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("#include <iostream>\n#include <string>\n#include <vector>\n\nusing namespace std;\n\nclass Solution {\npublic:\n    string longestPalindrome(string s) {\n        int n = s.size();\n        if (n < 2) {\n            return s;\n        }\n\n        int maxLen = 1;\n        int begin = 0;\n        // dp[i][j] 表示 s[i..j] 是否是回文串\n        vector<vector<int>> dp(n, vector<int>(n));\n        // 初始化：所有长度为 1 的子串都是回文串\n        for (int i = 0; i < n; i++) {\n            dp[i][i] = true;\n        }\n        // 递推开始\n        // 先枚举子串长度\n        for (int L = 2; L <= n; L++) {\n            // 枚举左边界，左边界的上限设置可以宽松一些\n            for (int i = 0; i < n; i++) {\n                // 由 L 和 i 可以确定右边界，即 j - i + 1 = L 得\n                int j = L + i - 1;\n                // 如果右边界越界，就可以退出当前循环\n                if (j >= n) {\n                    break;\n                }\n\n                if (s[i] != s[j]) {\n                    dp[i][j] = false;\n                } else {\n                    if (j - i < 3) {\n                        dp[i][j] = true;\n                    } else {\n                        dp[i][j] = dp[i + 1][j - 1];\n                    }\n                }\n\n                // 只要 dp[i][L] == true 成立，就表示子串 s[i..L] 是回文，此时记录回文长度和起始位置\n                if (dp[i][j] && j - i + 1 > maxLen) {\n                    maxLen = j - i + 1;\n                    begin = i;\n                }\n            }\n        }\n        return s.substr(begin, maxLen);\n    }\n};\n")])])]),e("p",[e("img",{attrs:{src:"https://images.xiaozhuanlan.com/uploads/photo/2022/c9ec23b1-aeea-4aae-8e7c-a8ef0feb9752.png",alt:""}})]),n._v(" "),e("h3",{attrs:{id:"几种语言运行效果对比"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#几种语言运行效果对比"}},[n._v("#")]),n._v(" 几种语言运行效果对比")]),n._v(" "),e("p",[e("img",{attrs:{src:"https://images.xiaozhuanlan.com/uploads/photo/2022/ca17501d-b2d3-4a85-a137-1398b799aebb.png",alt:""}})]),n._v(" "),e("p",[n._v("也欢迎关注我的公众号: "),e("code",[n._v("漫步coding")]),n._v("。 一起交流, 在coding的世界里漫步。")]),n._v(" "),e("p",[e("img",{attrs:{src:"https://images.xiaozhuanlan.com/uploads/photo/2022/5cb0c91e-fd83-4a04-8df6-65fb602b3834.png",alt:""}})])])}),[],!1,null,null,null);t.default=a.exports}}]);