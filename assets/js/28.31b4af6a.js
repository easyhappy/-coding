(window.webpackJsonp=window.webpackJsonp||[]).push([[28],{590:function(n,t,e){"use strict";e.r(t);var i=e(17),s=Object(i.a)({},(function(){var n=this,t=n.$createElement,e=n._self._c||t;return e("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[e("p",[n._v("给定两个大小分别为 m 和 n 的正序（从小到大）数组 nums1 和 nums2。请你找出并返回这两个正序数组的 中位数 。")]),n._v(" "),e("p",[n._v("算法的时间复杂度应该为 O(log (m+n)) 。")]),n._v(" "),e("p",[e("font",{attrs:{color:"#FF000"}},[n._v("题目难度: ★★★, 中等")])],1),n._v(" "),e("p",[n._v("示例 1：")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("输入：nums1 = [1,3], nums2 = [2]\n输出：2.00000\n解释：合并数组 = [1,2,3] ，中位数 2\n")])])]),e("p",[n._v("示例 2：")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("输入：nums1 = [1,2], nums2 = [3,4]\n输出：2.50000\n解释：合并数组 = [1,2,3,4] ，中位数 (2 + 3) / 2 = 2.5\n")])])]),e("p"),n._v(" "),e("p",[n._v("提示：")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("nums1.length == m\nnums2.length == n\n0 <= m <= 1000\n0 <= n <= 1000\n1 <= m + n <= 2000\n-106 <= nums1[i], nums2[i] <= 106\n")])])]),e("h3",{attrs:{id:"代码实现"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#代码实现"}},[n._v("#")]),n._v(" 代码实现")]),n._v(" "),e("blockquote",[e("p",[n._v("tips: 以下代码是使用Go代码实现的不同解法, 文章最后可以看C++、C、Java、Python实现")])]),n._v(" "),e("h4",{attrs:{id:"_1、二分法求解"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1、二分法求解"}},[n._v("#")]),n._v(" 1、二分法求解")]),n._v(" "),e("p",[n._v("此题关键在于通过时间复杂度Log(M+N)的限制，想到可能需要用到二分法求解,但二分法不适用于两个数组， 因此我们需要通过某种方法将两个数组的二分法转换为一个数组的二分法。")]),n._v(" "),e("p",[n._v("首先，我们理解什么中位数：指的是该数左右个数相等。")]),n._v(" "),e("p",[n._v("比如：odd : [1,| 2 |,3]，2 就是这个数组的中位数，左右两边都只要 1 位；")]),n._v(" "),e("p",[n._v("even: [1,| 2, 3 |,4]，2,3 就是这个数组的中位数，左右两边 1 位；")]),n._v(" "),e("p",[n._v("那么，现在我们有两个数组：")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("num1: [a1,a2,a3,...an]\n\nnums2: [b1,b2,b3,...bn]\n\n[nums1[:left1],nums2[:left2] | nums1[left1:], nums2[left2:]]\n")])])]),e("p",[n._v("只要保证左右两边 个数 相同，中位数就在 | 这个边界旁边产生。")]),n._v(" "),e("p",[n._v("如何找边界值，我们可以用二分法，我们先确定 num1 取 m1 个数的左半边，那么 num2 取 m2 = (m+n+1)/2 - m1 的左半边，找到合适的 m1，就用二分法找。")]),n._v(" "),e("p",[n._v("当 [ [a1],[b1,b2,b3] | [a2,..an],[b4,...bn] ]")]),n._v(" "),e("p",[n._v("我们只需要比较 b3 和 a2 的关系的大小，就可以知道这种分法是不是准确的！")]),n._v(" "),e("p",[n._v("例如：我们令：")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("nums1 = [-1,1,3,5,7,9]\n\nnums2 =[2,4,6,8,10,12,14,16]\n\n当 m1 = 4,m2 = 3 ,它的中位数就是median = (num1[m1] + num2[m2])/2\n")])])]),e("p",[n._v("时间复杂度：O(log(min(m,n)))O(log(min(m,n)))")]),n._v(" "),e("p",[n._v("对于代码中边界情况，大家需要自己琢磨。")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("func findMedianSortedArrays(nums1 []int, nums2 []int) float64 {\n    m,n := len(nums1),len(nums2)\n    if m>n{\n        return findMedianSortedArrays(nums2,nums1)\n    }\n    iMin ,iMax,laftLen := 0,m,(n+m+1)/2\n    for iMin <= iMax{\n        i := iMin + (iMax-iMin)/2\n        j := laftLen - i\n        if i > iMin && nums1[i-1] > nums2[j]{\n            iMax = i - 1\n        }else if i < iMax && nums2[j-1] > nums1[i]{\n            iMin = i + 1\n        }else{\n            leftMax := 0\n            if i == 0{\n                leftMax = nums2[j-1]\n            }else if j == 0{\n                leftMax = nums1[i-1]\n            }else{\n                leftMax = max(nums1[i-1],nums2[j-1])\n            }\n            if (m+n)%2 != 0{\n                return float64(leftMax)\n            }\n            rightMin := 0\n            if i == m {\n                rightMin = nums2[j]\n            }else if j == n{\n                rightMin = nums1[i]\n            }else{\n                rightMin = min(nums1[i],nums2[j])\n            }\n            return float64(leftMax+rightMin)/2.0\n        }\n    }\n  return 0.0\n}\nfunc max(a,b int)int{\n    if a > b{\n        return a\n    }else{\n        return b\n    }\n}\n\nfunc min(a,b int )int{\n    if a > b{\n        return b\n    }else{\n        return a\n    }\n}\n")])])]),e("p",[e("img",{attrs:{src:"https://images.xiaozhuanlan.com/uploads/photo/2022/3d26bcf8-87a4-4c42-9afe-911e902d17dc.png",alt:""}})]),n._v(" "),e("h3",{attrs:{id:"其他语言版本"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#其他语言版本"}},[n._v("#")]),n._v(" 其他语言版本")]),n._v(" "),e("p",[n._v("1、Python3")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v('class Solution:\n    def findMedianSortedArrays(self, nums1: List[int], nums2: List[int]) -> float:\n        def getKthElement(k):\n            """\n            - 主要思路：要找到第 k (k>1) 小的元素，那么就取 pivot1 = nums1[k/2-1] 和 pivot2 = nums2[k/2-1] 进行比较\n            - 这里的 "/" 表示整除\n            - nums1 中小于等于 pivot1 的元素有 nums1[0 .. k/2-2] 共计 k/2-1 个\n            - nums2 中小于等于 pivot2 的元素有 nums2[0 .. k/2-2] 共计 k/2-1 个\n            - 取 pivot = min(pivot1, pivot2)，两个数组中小于等于 pivot 的元素共计不会超过 (k/2-1) + (k/2-1) <= k-2 个\n            - 这样 pivot 本身最大也只能是第 k-1 小的元素\n            - 如果 pivot = pivot1，那么 nums1[0 .. k/2-1] 都不可能是第 k 小的元素。把这些元素全部 "删除"，剩下的作为新的 nums1 数组\n            - 如果 pivot = pivot2，那么 nums2[0 .. k/2-1] 都不可能是第 k 小的元素。把这些元素全部 "删除"，剩下的作为新的 nums2 数组\n            - 由于我们 "删除" 了一些元素（这些元素都比第 k 小的元素要小），因此需要修改 k 的值，减去删除的数的个数\n            """\n            \n            index1, index2 = 0, 0\n            while True:\n                # 特殊情况\n                if index1 == m:\n                    return nums2[index2 + k - 1]\n                if index2 == n:\n                    return nums1[index1 + k - 1]\n                if k == 1:\n                    return min(nums1[index1], nums2[index2])\n\n                # 正常情况\n                newIndex1 = min(index1 + k // 2 - 1, m - 1)\n                newIndex2 = min(index2 + k // 2 - 1, n - 1)\n                pivot1, pivot2 = nums1[newIndex1], nums2[newIndex2]\n                if pivot1 <= pivot2:\n                    k -= newIndex1 - index1 + 1\n                    index1 = newIndex1 + 1\n                else:\n                    k -= newIndex2 - index2 + 1\n                    index2 = newIndex2 + 1\n        \n        m, n = len(nums1), len(nums2)\n        totalLength = m + n\n        if totalLength % 2 == 1:\n            return getKthElement((totalLength + 1) // 2)\n        else:\n            return (getKthElement(totalLength // 2) + getKthElement(totalLength // 2 + 1)) / 2\n')])])]),e("p",[e("img",{attrs:{src:"https://images.xiaozhuanlan.com/uploads/photo/2022/f438c074-68e3-455e-a209-dfc1bf5c62eb.png",alt:""}})]),n._v(" "),e("p",[n._v("2、C++")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v('class Solution {\npublic:\n    int getKthElement(const vector<int>& nums1, const vector<int>& nums2, int k) {\n        /* 主要思路：要找到第 k (k>1) 小的元素，那么就取 pivot1 = nums1[k/2-1] 和 pivot2 = nums2[k/2-1] 进行比较\n         * 这里的 "/" 表示整除\n         * nums1 中小于等于 pivot1 的元素有 nums1[0 .. k/2-2] 共计 k/2-1 个\n         * nums2 中小于等于 pivot2 的元素有 nums2[0 .. k/2-2] 共计 k/2-1 个\n         * 取 pivot = min(pivot1, pivot2)，两个数组中小于等于 pivot 的元素共计不会超过 (k/2-1) + (k/2-1) <= k-2 个\n         * 这样 pivot 本身最大也只能是第 k-1 小的元素\n         * 如果 pivot = pivot1，那么 nums1[0 .. k/2-1] 都不可能是第 k 小的元素。把这些元素全部 "删除"，剩下的作为新的 nums1 数组\n         * 如果 pivot = pivot2，那么 nums2[0 .. k/2-1] 都不可能是第 k 小的元素。把这些元素全部 "删除"，剩下的作为新的 nums2 数组\n         * 由于我们 "删除" 了一些元素（这些元素都比第 k 小的元素要小），因此需要修改 k 的值，减去删除的数的个数\n         */\n\n        int m = nums1.size();\n        int n = nums2.size();\n        int index1 = 0, index2 = 0;\n\n        while (true) {\n            // 边界情况\n            if (index1 == m) {\n                return nums2[index2 + k - 1];\n            }\n            if (index2 == n) {\n                return nums1[index1 + k - 1];\n            }\n            if (k == 1) {\n                return min(nums1[index1], nums2[index2]);\n            }\n\n            // 正常情况\n            int newIndex1 = min(index1 + k / 2 - 1, m - 1);\n            int newIndex2 = min(index2 + k / 2 - 1, n - 1);\n            int pivot1 = nums1[newIndex1];\n            int pivot2 = nums2[newIndex2];\n            if (pivot1 <= pivot2) {\n                k -= newIndex1 - index1 + 1;\n                index1 = newIndex1 + 1;\n            }\n            else {\n                k -= newIndex2 - index2 + 1;\n                index2 = newIndex2 + 1;\n            }\n        }\n    }\n\n    double findMedianSortedArrays(vector<int>& nums1, vector<int>& nums2) {\n        int totalLength = nums1.size() + nums2.size();\n        if (totalLength % 2 == 1) {\n            return getKthElement(nums1, nums2, (totalLength + 1) / 2);\n        }\n        else {\n            return (getKthElement(nums1, nums2, totalLength / 2) + getKthElement(nums1, nums2, totalLength / 2 + 1)) / 2.0;\n        }\n    }\n};\n\n')])])]),e("p",[e("img",{attrs:{src:"https://images.xiaozhuanlan.com/uploads/photo/2022/c16b1a51-d325-444f-89fa-5e862e87ca7c.png",alt:""}})]),n._v(" "),e("p",[n._v("3、Java版本")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v('class Solution {\n    public double findMedianSortedArrays(int[] nums1, int[] nums2) {\n        int length1 = nums1.length, length2 = nums2.length;\n        int totalLength = length1 + length2;\n        if (totalLength % 2 == 1) {\n            int midIndex = totalLength / 2;\n            double median = getKthElement(nums1, nums2, midIndex + 1);\n            return median;\n        } else {\n            int midIndex1 = totalLength / 2 - 1, midIndex2 = totalLength / 2;\n            double median = (getKthElement(nums1, nums2, midIndex1 + 1) + getKthElement(nums1, nums2, midIndex2 + 1)) / 2.0;\n            return median;\n        }\n    }\n\n    public int getKthElement(int[] nums1, int[] nums2, int k) {\n        /* 主要思路：要找到第 k (k>1) 小的元素，那么就取 pivot1 = nums1[k/2-1] 和 pivot2 = nums2[k/2-1] 进行比较\n         * 这里的 "/" 表示整除\n         * nums1 中小于等于 pivot1 的元素有 nums1[0 .. k/2-2] 共计 k/2-1 个\n         * nums2 中小于等于 pivot2 的元素有 nums2[0 .. k/2-2] 共计 k/2-1 个\n         * 取 pivot = min(pivot1, pivot2)，两个数组中小于等于 pivot 的元素共计不会超过 (k/2-1) + (k/2-1) <= k-2 个\n         * 这样 pivot 本身最大也只能是第 k-1 小的元素\n         * 如果 pivot = pivot1，那么 nums1[0 .. k/2-1] 都不可能是第 k 小的元素。把这些元素全部 "删除"，剩下的作为新的 nums1 数组\n         * 如果 pivot = pivot2，那么 nums2[0 .. k/2-1] 都不可能是第 k 小的元素。把这些元素全部 "删除"，剩下的作为新的 nums2 数组\n         * 由于我们 "删除" 了一些元素（这些元素都比第 k 小的元素要小），因此需要修改 k 的值，减去删除的数的个数\n         */\n\n        int length1 = nums1.length, length2 = nums2.length;\n        int index1 = 0, index2 = 0;\n        int kthElement = 0;\n\n        while (true) {\n            // 边界情况\n            if (index1 == length1) {\n                return nums2[index2 + k - 1];\n            }\n            if (index2 == length2) {\n                return nums1[index1 + k - 1];\n            }\n            if (k == 1) {\n                return Math.min(nums1[index1], nums2[index2]);\n            }\n            \n            // 正常情况\n            int half = k / 2;\n            int newIndex1 = Math.min(index1 + half, length1) - 1;\n            int newIndex2 = Math.min(index2 + half, length2) - 1;\n            int pivot1 = nums1[newIndex1], pivot2 = nums2[newIndex2];\n            if (pivot1 <= pivot2) {\n                k -= (newIndex1 - index1 + 1);\n                index1 = newIndex1 + 1;\n            } else {\n                k -= (newIndex2 - index2 + 1);\n                index2 = newIndex2 + 1;\n            }\n        }\n    }\n}\n')])])]),e("p",[e("img",{attrs:{src:"https://images.xiaozhuanlan.com/uploads/photo/2022/8c28f345-cce1-4b15-9ed8-25563c18520d.png",alt:""}})]),n._v(" "),e("h3",{attrs:{id:"几种语言运行效果对比"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#几种语言运行效果对比"}},[n._v("#")]),n._v(" 几种语言运行效果对比")]),n._v(" "),e("p",[e("img",{attrs:{src:"https://images.xiaozhuanlan.com/uploads/photo/2022/a23ec06b-0036-4d63-aeed-169f3f35bb66.png",alt:""}})]),n._v(" "),e("p",[n._v("也欢迎关注我的公众号: "),e("code",[n._v("漫步coding")]),n._v("。 一起交流, 在coding的世界里漫步。")]),n._v(" "),e("p",[e("img",{attrs:{src:"https://images.xiaozhuanlan.com/uploads/photo/2022/5cb0c91e-fd83-4a04-8df6-65fb602b3834.png",alt:""}})])])}),[],!1,null,null,null);t.default=s.exports}}]);